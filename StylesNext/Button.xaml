<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="..\ResourceDictionaries\Colors.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type ButtonBase}">
        <Border Margin="2" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" x:Name="ButtonBorder">
            <Grid Margin="5,2" MinWidth="60">
                <ContentPresenter IsHitTestVisible="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="SimpleButtonTemplate" TargetType="{x:Type ButtonBase}">
        <ContentPresenter IsHitTestVisible="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    </ControlTemplate>

    <Style x:Key="ButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Template" Value="{DynamicResource SimpleButtonTemplate}"/>
    </Style>

    <Style x:Key="DefaultButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Template" Value="{DynamicResource ButtonTemplate}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorder}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonText}"/>
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsEnabled" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundHover}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderHover}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocused" Value="True"/>
                    <Condition Property="IsEnabled" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundActive}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderActive}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundDisabled}"/>
                <Setter Property="Foreground" Value="{StaticResource ButtonTextDisabled}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderDisabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsEnabled" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundPrimary}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderPrimary}"/>
                    <Setter Property="Foreground" Value="{StaticResource ButtonTextPrimary}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundPrimaryDisabled}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderPrimaryDisabled}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsEnabled" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundPrimaryHover}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderPrimaryHover}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsEnabled" Value="True"/>
                    <Condition Property="IsFocused" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundPrimaryActive}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderPrimaryActive}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource DefaultButtonStyle}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsEnabled" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    
    <Style x:Key="LinkButtonStyle" TargetType="Button">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Foreground" Value="{StaticResource LinkButtonTextHover}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid VerticalAlignment="Center">
                        <TextBlock TextDecorations="Underline" Foreground="{StaticResource LinkButtonText}" Text="{TemplateBinding Content}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Cursor" Value="Hand" />
    </Style>


    <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type ButtonBase}">
        <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" x:Name="ButtonBorder">
            <Border.Resources>
                <Viewbox x:Key="ArrowMenu" x:Shared="False">
                    <Grid
        Background="Transparent"
        Height="18"
        Width="25">
                        <Path            
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Stretch="Fill"
            Opacity="1"
            Height="9.61773681640625"
            Width="19.23607635498047"
                Margin="3"
            Data="M 24.1932373046875,14.28680419921875 C24.1932373046875,14.28680419921875 14.57543182373047,93.904541015625 14.57543182373047,93.904541015625 14.57543182373047,93.904541015625 4.95716024970703,14.28680419921875 4.95716024970703,14.28680419921875 4.95716024970703,14.28680419921875 4.95716024970703,14.28680419921875 4.95716024970703,14.28680419921875 "
            Stroke="White"
            StrokeThickness="3" />
                    </Grid>
                </Viewbox>
            </Border.Resources>
            <Grid Margin="5,3" MinWidth="60">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Grid.Column="0" IsHitTestVisible="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <ContentPresenter Grid.Column="1" Content="{StaticResource ArrowMenu}" Margin="0,3,0,0" Height="12"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <Style x:Key="DropDownButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Template" Value="{DynamicResource DropDownButtonTemplate}"/>
    </Style>

</ResourceDictionary>